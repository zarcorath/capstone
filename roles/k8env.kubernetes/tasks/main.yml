---
# Test for K8 repo
- name: K8 repo test
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/kubernetes.sources
  register: k8_repo

# Install k8 repo
- include_tasks: k8-repo.yml
  when: not k8_repo.stat.exists

# Modprope requirements
- name: Overlay
  community.general.modprobe:
    name: overlay
    state: present
  when: not k8_repo.stat.exists

- name: br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present
  when: not k8_repo.stat.exists

# Set sysctl requirements
- name: sysctl ipv4
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
  when: not k8_repo.stat.exists

- name: sysctl bridge ip6tables
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: '1'
    sysctl_set: true
  when: not k8_repo.stat.exists

- name: sysctl bridge iptables
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: true
  when: not k8_repo.stat.exists
  register: iptables

- name: run sysctl system command
  ansible.builtin.shell: sysctl --system 
  when: iptables.changed

# install or update kubernetes components
- name: Install K8 apps
  ansible.builtin.apt:
    name:
    - kubelet
    - kubeadm
    - kubectl
    state: latest
    update_cache: yes
  register: k8_installed

# Make sure swap is disabled if the above changes
- name: Disable swap
  ansible.builtin.shell: swapoff -a
  when: k8_installed is changed

- name: Disable swap in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  when: k8_installed is changed

# Install cilium CLI
- include_tasks: cilium-cli.yml
  when: not k8_repo.stat.exists

# Test for k8 admin.conf
- name: admin.conf test
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: k8_admin

# setup the first controller
- include_tasks: control1.yml
  when: (not k8_admin.stat.exists) and (node_type == "primary_master")

# Get the join command
- name: Get the kubeadm join command from the Kubernetes master.
  ansible.builtin.command: kubeadm token create --print-join-command
  changed_when: false
  when: node_type == "primary_master"
  register: kubernetes_join_command_result

- name: Set the kubeadm join command globally.
  ansible.builtin.set_fact:
    kubernetes_join_command: "{{ kubernetes_join_command_result.stdout }}"
  when: kubernetes_join_command_result.stdout is defined
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['k8cluster'] }}"

# Add control plane  **BROKEN**
# - name: Add control plane node
#   ansible.builtin.shell: "{{ kubernetes_join_command }} --control-plane" 
#   when: node_type == "master"

- name: Add worker nodes
  ansible.builtin.shell: "{{ kubernetes_join_command }}"
  when: node_type == "worker"